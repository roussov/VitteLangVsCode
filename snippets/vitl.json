{
  "Module": {
    "prefix": ["module", "mod"],
    "body": ["module ${1:name}", "${0}"],
    "description": "Déclare un module"
  },
  "Use / Import": {
    "prefix": ["use", "import", "from"],
    "body": ["use ${1:path}${2::${3:Symbol}}", "${0}"],
    "description": "Import"
  },
  "Fn": {
    "prefix": ["fn", "func"],
    "body": [
      "${1|pub,|}fn ${2:name}${3:<${4:T}>}(${5:args}): ${6:void} {",
      "  ${0}",
      "}"
    ],
    "description": "Déclare une fonction (Vitl)"
  },
  "Def (style Python)": {
    "prefix": ["def"],
    "body": [
      "def ${1:name}(${2:args})${3:: ${4:void}}:",
      "  ${0}"
    ],
    "description": "Déclare une fonction style Python"
  },
  "Class": {
    "prefix": ["class"],
    "body": [
      "class ${1:Name}${2:(${3:Base})} {",
      "  def __init__(${4:self}${5:, args}):",
      "    ${0}",
      "}"
    ],
    "description": "Classe style Python"
  },
  "Struct": {
    "prefix": ["struct"],
    "body": [
      "${1|pub,|}struct ${2:Name}${3:<${4:T}>} {",
      "  ${5:field}: ${6:type}",
      "}"
    ],
    "description": "Struct"
  },
  "Enum": {
    "prefix": ["enum"],
    "body": [
      "${1|pub,|}enum ${2:Name} {",
      "  ${3:Variant1},",
      "  ${4:Variant2}",
      "}"
    ],
    "description": "Enum"
  },
  "Interface": {
    "prefix": ["interface", "trait"],
    "body": [
      "interface ${1:Iface} {",
      "  fn ${2:method}(${3:&self}): ${4:void};",
      "}"
    ],
    "description": "Interface / Trait"
  },
  "Impl": {
    "prefix": ["impl"],
    "body": [
      "impl ${1:Type} {",
      "  fn ${2:new}(${3:args}): ${1:Type} {",
      "    ${0}",
      "  }",
      "}"
    ],
    "description": "Bloc d’implémentation"
  },
  "Let": {
    "prefix": ["let"],
    "body": ["let ${1:name}${2:: ${3:type}} = ${4:init};${0}"],
    "description": "Variable immuable"
  },
  "Let Mut": {
    "prefix": ["letm", "mut"],
    "body": ["let mut ${1:name}${2:: ${3:type}} = ${4:init};${0}"],
    "description": "Variable mutable"
  },
  "Const": {
    "prefix": ["const"],
    "body": ["const ${1:NAME}: ${2:type} = ${3:value};${0}"],
    "description": "Constante"
  },
  "If / Else": {
    "prefix": ["if", "ife"],
    "body": [
      "if ${1:cond} {",
      "  ${2:// ...}",
      "} else {",
      "  ${0:// ...}",
      "}"
    ],
    "description": "Condition"
  },
  "Else If": {
    "prefix": ["elif", "elseif"],
    "body": [
      "else if ${1:cond} {",
      "  ${0}",
      "}"
    ],
    "description": "Branche conditionnelle intermédiaire"
  },
  "Match / Switch": {
    "prefix": ["match", "switch"],
    "body": [
      "match ${1:expr} {",
      "  ${2:Pattern1} => ${3:expr1},",
      "  ${4:Pattern2} => ${5:expr2},",
      "  _ => ${0:default}",
      "}"
    ],
    "description": "Branchement par motifs"
  },
  "For": {
    "prefix": ["for"],
    "body": [
      "for ${1:item} in ${2:iter} {",
      "  ${0}",
      "}"
    ],
    "description": "Boucle for"
  },
  "While": {
    "prefix": ["while"],
    "body": [
      "while ${1:cond} {",
      "  ${0}",
      "}"
    ],
    "description": "Boucle while"
  },
  "Loop": {
    "prefix": ["loop"],
    "body": [
      "loop {",
      "  ${0}",
      "}"
    ],
    "description": "Boucle infinie"
  },
  "Break / Continue": {
    "prefix": ["brkcont"],
    "body": ["${1|break,continue|};${0}"],
    "description": "Contrôle de boucle"
  },
  "Return": {
    "prefix": ["ret", "return"],
    "body": ["return${1: ${2:value}};${0}"],
    "description": "Retour de fonction"
  },
  "Lambda": {
    "prefix": ["lambda", "closure"],
    "body": ["|${1:args}| ${2:expr}${0}"],
    "description": "Expression lambda"
  },
  "Try / Catch": {
    "prefix": ["try", "trycatch"],
    "body": [
      "try {",
      "  ${1:// code}",
      "} catch ${2:e} {",
      "  ${0:// handle}",
      "}"
    ],
    "description": "Gestion d’erreur"
  },
  "Defer / Using": {
    "prefix": ["defer", "using"],
    "body": [
      "defer {",
      "  ${0:// cleanup}",
      "}"
    ],
    "description": "Nettoyage différé"
  },
  "Test": {
    "prefix": ["test", "unittest"],
    "body": [
      "@test",
      "fn ${1:name}_test() {",
      "  ${0}",
      "}"
    ],
    "description": "Test unitaire"
  },
  "Main": {
    "prefix": ["main"],
    "body": [
      "fn main(args: ${1:[]string}): ${2:void} {",
      "  ${0}",
      "}"
    ],
    "description": "Point d’entrée"
  },
  "Fmt Print": {
    "prefix": ["print", "println"],
    "body": ["println(${1:\"${2:text}\"});${0}"],
    "description": "Affichage console"
  },
  "Assert": {
    "prefix": ["assert"],
    "body": ["assert(${1:cond}, ${2:\"message\"});${0}"],
    "description": "Assertion"
  },
  "Doc Comment": {
    "prefix": ["doc", "///"],
    "body": ["/// ${1:Résumé}", "///", "/// ${0:Détails}"],
    "description": "Commentaire de documentation"
  },
  "Block Comment": {
    "prefix": ["/*", "blockcmt"],
    "body": ["/*", " * ${1:texte}", " */${0}"],
    "description": "Commentaire bloc"
  },
  "Region": {
    "prefix": ["region"],
    "body": ["// region ${1:name}", "${0}", "// endregion"],
    "description": "Marqueurs de repli (folding)"
  }
}

